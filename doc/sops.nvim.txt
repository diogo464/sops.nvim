*sops.nvim.txt*                                    SOPS integration for neovim

==============================================================================
Table of Contents                                *sops.nvim-table-of-contents*

1. sops.nvim                                             |sops.nvim-sops.nvim|
  - Installation (lazy.nvim)    |sops.nvim-sops.nvim-installation-(lazy.nvim)|
  - Configuration                          |sops.nvim-sops.nvim-configuration|
  - User Commands                          |sops.nvim-sops.nvim-user-commands|
  - API                                              |sops.nvim-sops.nvim-api|

==============================================================================
1. sops.nvim                                             *sops.nvim-sops.nvim*

SOPS <https://github.com/getsops/sops> support for neovim.


INSTALLATION (LAZY.NVIM)        *sops.nvim-sops.nvim-installation-(lazy.nvim)*

>lua
    {
        "diogo464/sops.nvim",
        -- this is required, even if empty.
        -- see the configuration section bellow for available options.
        opts = {}
    }
<


CONFIGURATION                              *sops.nvim-sops.nvim-configuration*

>lua
    {
        --- custom path for the sops binary
        sops_path = "", 
        --- create user commands
        user_commands = true,
    }
<


USER COMMANDS                              *sops.nvim-sops.nvim-user-commands*

- `SopsEncrypt`: encrypts the current buffer.
- `SopsDecrypt`: decrypts the current buffer.
- `SopsView`: decrypts the current buffer and shows the output in a scratch buffer.
- `SopsEdit`: decrypts the curretn buffer and re-encrypts it on write.


API                                                  *sops.nvim-sops.nvim-api*

>lua
    ---encrypt the given buffer
    ---@param bufnr? number
    sops.encrypt(bufnr)
    
    ---decrypt the given buffer
    ---@param bufnr? number
    sops.decrypt(bufnr)
    
    ---edit the given buffer.
    ---this will decrypt it and re-encrypt it on the next write.
    ---@param bufnr? number
    sops.edit(bufnr)
    
    ---decrypt the buffer and show the output on a scratch buffer
    ---@param bufnr? number
    sops.view(bufnr)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
